'use client';

import React, { useState, useEffect } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area, BarChart, Bar } from 'recharts';

interface ConversationChunk {
  chunk_id: string;
  start_time: string;
  end_time: string;
  message_count: number;
  context_type: string;
  emotional_intensity: number;
  intimacy_level: number;
  support_level: number;
  conflict_level: number;
  communication_pattern: string;
  temporal_context: string;
  relationship_dynamics: string;
  tags_json: string;
  chunk_preview: string;
}

interface ConversationInsights {
  totalChunks: number;
  averageEmotionalIntensity: number;
  averageIntimacyLevel: number;
  averageSupportLevel: number;
  averageConflictLevel: number;
  contextTypeDistribution: Array<{ context_type: string; count: number; avg_emotion: number }>;
  emotionalTrend: Array<{ date: string; emotion: number; intimacy: number; support: number; conflict: number }>;
  communicationPatterns: Array<{ pattern: string; frequency: number; avg_emotion: number }>;
  relationshipArc: Array<{ month: string; emotional_health: number; conversations: number }>;
  topTags: Array<{ tag: string; frequency: number; emotional_context: string }>;
}

interface ProcessingStatus {
  status: string;
  totalChunks?: number;
  processedChunks?: number;
  startedAt?: string;
  lastUpdate?: string;
  completedAt?: string;
  error?: string;
}

export default function UnmaskDashboard() {
  const [chunks, setChunks] = useState<ConversationChunk[]>([]);
  const [insights, setInsights] = useState<ConversationInsights | null>(null);
  const [loading, setLoading] = useState(true);
  const [processingStatus, setProcessingStatus] = useState<ProcessingStatus | null>(null);
  const [selectedChunk, setSelectedChunk] = useState<ConversationChunk | null>(null);
  const [filterContext, setFilterContext] = useState('all');
  const [timeRange, setTimeRange] = useState('3months');

  useEffect(() => {
    checkProcessingStatus();
    const interval = setInterval(checkProcessingStatus, 10000); // Check every 10 seconds
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    fetchConversationInsights();
  }, [timeRange, filterContext]);

  const checkProcessingStatus = async () => {
    try {
      const response = await fetch('https://unmask-vectorize.megan-d14.workers.dev/status');
      const status = await response.json();
      setProcessingStatus(status);
    } catch (error) {
      console.error('Error checking processing status:', error);
    }
  };

  const fetchConversationInsights = async () => {
    if (processingStatus?.status === 'processing') {
      // Don't fetch insights while processing
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('/api/conversation-insights', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ timeRange, filterContext }),
      });
      
      const data = await response.json();
      setChunks(data.chunks || []);
      setInsights(data.insights || null);
    } catch (error) {
      console.error('Error fetching conversation insights:', error);
      // Use mock data for now
      setInsights(mockInsights);
      setChunks(mockChunks);
    }
    setLoading(false);
  };

  const getProgressPercentage = () => {
    if (!processingStatus || !processingStatus.totalChunks || !processingStatus.processedChunks) return 0;
    return (processingStatus.processedChunks / processingStatus.totalChunks) * 100;
  };

  const getETA = () => {
    if (!processingStatus || !processingStatus.startedAt || !processingStatus.processedChunks) return 'Calculating...';
    
    const startTime = new Date(processingStatus.startedAt);
    const now = new Date();
    const elapsed = now.getTime() - startTime.getTime();
    const rate = processingStatus.processedChunks / (elapsed / 1000 / 60); // chunks per minute
    const remaining = (processingStatus.totalChunks || 0) - processingStatus.processedChunks;
    const etaMinutes = remaining / rate;
    
    if (etaMinutes < 60) {
      return `${Math.round(etaMinutes)} minutes`;
    } else {
      const hours = Math.floor(etaMinutes / 60);
      const minutes = Math.round(etaMinutes % 60);
      return `${hours}h ${minutes}m`;
    }
  };

  if (processingStatus?.status === 'processing') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white">
        <div className="container mx-auto px-6 py-12">
          <div className="max-w-4xl mx-auto text-center">
            <div className="text-8xl mb-8">🧠</div>
            <h1 className="text-5xl font-bold mb-4">Analyzing Your Relationship</h1>
            <p className="text-xl text-purple-300 mb-8">
              OpenAI is discovering the hidden patterns in your conversations...
            </p>
            
            <div className="bg-slate-800/50 backdrop-blur rounded-xl p-8 mb-8">
              <div className="mb-6">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-lg">Processing Progress</span>
                  <span className="text-lg font-bold">{getProgressPercentage().toFixed(1)}%</span>
                </div>
                <div className="w-full bg-slate-700 rounded-full h-4">
                  <div 
                    className="bg-gradient-to-r from-purple-500 to-pink-500 h-4 rounded-full transition-all duration-500"
                    style={{ width: `${getProgressPercentage()}%` }}
                  ></div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 text-center">
                <div>
                  <div className="text-3xl font-bold text-purple-400">
                    {processingStatus.processedChunks?.toLocaleString() || 0}
                  </div>
                  <div className="text-gray-400">Chunks Analyzed</div>
                </div>
                <div>
                  <div className="text-3xl font-bold text-blue-400">
                    {processingStatus.totalChunks?.toLocaleString() || 0}
                  </div>
                  <div className="text-gray-400">Total Conversations</div>
                </div>
                <div>
                  <div className="text-3xl font-bold text-green-400">
                    {getETA()}
                  </div>
                  <div className="text-gray-400">Estimated Time Remaining</div>
                </div>
              </div>
            </div>
            
            <div className="bg-slate-800/30 rounded-xl p-6">
              <h3 className="text-xl font-semibold mb-4">What's Being Analyzed:</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-left">
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                    <span>Emotional intensity patterns</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-pink-400 rounded-full"></div>
                    <span>Intimacy level tracking</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                    <span>Communication patterns</span>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                    <span>Support dynamics</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-yellow-400 rounded-full"></div>
                    <span>Conflict resolution styles</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-red-400 rounded-full"></div>
                    <span>relationship context mapping</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">🥽</div>
          <div className="text-white text-xl mb-2">Loading relationship insights...</div>
          <div className="text-purple-300">Preparing your conversation intelligence</div>
        </div>
      </div>
    );
  }

  const getContextColor = (contextType: string) => {
    const colors = {
      'supportive_celebration': 'from-emerald-500 to-green-600',
      'conflict_resolution': 'from-orange-500 to-red-500',
      'intimate_planning': 'from-pink-500 to-rose-600',
      'daily_check_in': 'from-blue-500 to-indigo-600',
      'playful_banter': 'from-yellow-400 to-orange-500',
      'emotional_support': 'from-purple-500 to-violet-600',
    };
    return colors[contextType as keyof typeof colors] || 'from-gray-500 to-gray-600';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white">
      {/* Header */}
      <div className="border-b border-purple-800 bg-black/20 backdrop-blur">
        <div className="container mx-auto px-6 py-6">
          <h1 className="text-4xl font-bold mb-2">🥽 Unmask</h1>
          <p className="text-purple-300 text-lg">Your Relationship Intelligence Dashboard</p>
          
          {processingStatus?.status === 'completed' && (
            <div className="mt-4 bg-green-900/30 border border-green-600 rounded-lg p-3">
              <span className="text-green-400 font-medium">
                ✅ Analysis Complete! {processingStatus.totalChunks} conversations processed.
              </span>
            </div>
          )}
        </div>
      </div>

      {/* Controls */}
      <div className="container mx-auto px-6 py-6">
        <div className="flex flex-wrap gap-4 mb-8">
          <select 
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value)}
            className="bg-slate-800 border border-purple-600 rounded-lg px-4 py-2 text-white"
          >
            <option value="1month">Last Month</option>
            <option value="3months">Last 3 Months</option>
            <option value="6months">Last 6 Months</option>
            <option value="all">All Time</option>
          </select>
          
          <select 
            value={filterContext}
            onChange={(e) => setFilterContext(e.target.value)}
            className="bg-slate-800 border border-purple-600 rounded-lg px-4 py-2 text-white"
          >
            <option value="all">All Contexts</option>
            <option value="supportive_celebration">Supportive Moments</option>
            <option value="conflict_resolution">Conflict Resolution</option>
            <option value="intimate_planning">Intimate Planning</option>
            <option value="daily_check_in">Daily Check-ins</option>
            <option value="playful_banter">Playful Banter</option>
          </select>
        </div>

        {insights && (
          <>
            {/* Key Relationship Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
              <div className="bg-gradient-to-br from-purple-600 to-purple-800 rounded-xl p-6">
                <h3 className="text-purple-200 text-sm uppercase tracking-wide mb-2">Conversations</h3>
                <p className="text-3xl font-bold">{insights.totalChunks.toLocaleString()}</p>
              </div>
              
              <div className="bg-gradient-to-br from-pink-600 to-rose-700 rounded-xl p-6">
                <h3 className="text-pink-200 text-sm uppercase tracking-wide mb-2">Emotional Intensity</h3>
                <p className="text-3xl font-bold">{insights.averageEmotionalIntensity.toFixed(1)}<span className="text-lg">/10</span></p>
              </div>
              
              <div className="bg-gradient-to-br from-red-600 to-red-800 rounded-xl p-6">
                <h3 className="text-red-200 text-sm uppercase tracking-wide mb-2">Intimacy Level</h3>
                <p className="text-3xl font-bold">{insights.averageIntimacyLevel.toFixed(1)}<span className="text-lg">/10</span></p>
              </div>
              
              <div className="bg-gradient-to-br from-emerald-600 to-green-700 rounded-xl p-6">
                <h3 className="text-emerald-200 text-sm uppercase tracking-wide mb-2">Support Level</h3>
                <p className="text-3xl font-bold">{insights.averageSupportLevel.toFixed(1)}<span className="text-lg">/10</span></p>
              </div>
              
              <div className="bg-gradient-to-br from-orange-600 to-red-700 rounded-xl p-6">
                <h3 className="text-orange-200 text-sm uppercase tracking-wide mb-2">Conflict Level</h3>
                <p className="text-3xl font-bold">{insights.averageConflictLevel.toFixed(1)}<span className="text-lg">/5</span></p>
              </div>
            </div>

            {/* Charts */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
              {/* Emotional Trend */}
              <div className="bg-slate-800/50 backdrop-blur rounded-xl p-6">
                <h3 className="text-xl font-semibold mb-4">Emotional Journey Over Time</h3>
                <ResponsiveContainer width="100%" height={350}>
                  <LineChart data={insights.emotionalTrend}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                    <XAxis dataKey="date" stroke="#9CA3AF" />
                    <YAxis domain={[0, 10]} stroke="#9CA3AF" />
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: '#1F2937', 
                        border: '1px solid #7C3AED',
                        borderRadius: '8px'
                      }} 
                    />
                    <Line type="monotone" dataKey="emotion" stroke="#8B5CF6" strokeWidth={2} name="Emotional Intensity" />
                    <Line type="monotone" dataKey="intimacy" stroke="#EC4899" strokeWidth={2} name="Intimacy" />
                    <Line type="monotone" dataKey="support" stroke="#10B981" strokeWidth={2} name="Support" />
                    <Line type="monotone" dataKey="conflict" stroke="#F59E0B" strokeWidth={2} name="Conflict" />
                  </LineChart>
                </ResponsiveContainer>
              </div>

              {/* Context Distribution */}
              <div className="bg-slate-800/50 backdrop-blur rounded-xl p-6">
                <h3 className="text-xl font-semibold mb-4">Conversation Types</h3>
                <ResponsiveContainer width="100%" height={350}>
                  <BarChart data={insights.contextTypeDistribution}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                    <XAxis dataKey="context_type" stroke="#9CA3AF" angle={-45} textAnchor="end" height={80} />
                    <YAxis stroke="#9CA3AF" />
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: '#1F2937', 
                        border: '1px solid #7C3AED',
                        borderRadius: '8px'
                      }} 
                    />
                    <Bar dataKey="count" fill="#8B5CF6" radius={[4, 4, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          </>
        )}

        {/* Processing Status or Recent Chunks */}
        <div className="bg-slate-800/50 backdrop-blur rounded-xl p-6">
          <h3 className="text-xl font-semibold mb-4">
            {processingStatus?.status === 'completed' ? 'Recent Conversation Analysis' : 'System Status'}
          </h3>
          
          {processingStatus?.status === 'completed' ? (
            <div className="text-center py-8">
              <div className="text-6xl mb-4">🎉</div>
              <h3 className="text-2xl font-bold mb-2">Analysis Complete!</h3>
              <p className="text-gray-300 mb-4">
                Your {processingStatus.totalChunks} conversations have been analyzed with OpenAI intelligence.
              </p>
              <button 
                onClick={fetchConversationInsights}
                className="bg-purple-600 hover:bg-purple-700 px-6 py-3 rounded-lg font-medium transition-colors"
              >
                View Relationship Insights
              </button>
            </div>
          ) : (
            <div className="text-center py-8">
              <div className="text-4xl mb-4">⚙️</div>
              <p className="text-gray-300">
                {processingStatus?.status === 'processing' 
                  ? 'Processing in progress...' 
                  : 'Ready to analyze your relationship patterns'}
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// Mock data for fallback
const mockInsights: ConversationInsights = {
  totalChunks: 0,
  averageEmotionalIntensity: 0,
  averageIntimacyLevel: 0,
  averageSupportLevel: 0,
  averageConflictLevel: 0,
  contextTypeDistribution: [],
  emotionalTrend: [],
  communicationPatterns: [],
  relationshipArc: [],
  topTags: []
};

const mockChunks: ConversationChunk[] = [];